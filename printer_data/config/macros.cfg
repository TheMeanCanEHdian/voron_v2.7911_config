#####################################################################
#   Print Start End Cancel Pause Resume Purge
#####################################################################
[gcode_macro PRINT_START]
gcode:
    {action_respond_info("Running PRINT START...")}

    {% set bed_type = params.BED_TYPE|string %}
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set filament = params.FILAMENT|string %}
    # {% set printer = params.PRINTER_PRESET|string %}

    BED_MESH_CLEAR

    STOP_DELAYED_GCODE                                                                                                      ; Stop all delayed gcode so funky things dont happen later
    # RESET_SPEEDS_FEEDS BYPASS={bypass}                                                                                      ; Reset all speeds and feeds because I forget
    STATUS_BUSY
    SET_BED_CONT TEMP={bedtemp}                                                                                             ; Start heating the bed
    SET_EXTRUDER_CONT TEMP=100
    FILAMENT_DETECT FILAMENT={filament} EVENT=START                                                                         ; Run custom gcode based off the filament that is being used
    SET_EXTRUDER_WAIT TEMP=150
    SET_GCODE_OFFSET Z=0                                                                                                    ; Zero out z offset
    
    CG28                                                                                                                    ; Conditional G28
    G21                                                                                                                     ; set units to mm
    G90                                                                                                                     ; use absolute coordinates
    M83                                                                                                                     ; relative extruder positioning
    G92 E0.0  
    
    # STATUS_LEVELING
    # QUAD_GANTRY_LEVEL
    STATUS_CLEANING
    CLEAN_NOZZLE

    PARKBED    
    STATUS_HEATING                                                                                                          ; reset extruder distance position
    SET_BED_WAIT TEMP={bedtemp}                                                                                             ; Wait for bed temp only if they are not already at temp
    SET_CHAMBER_MINIMUM TEMP={chambertemp}                                                                                  ; Wait for the min chamber temp to be reached only if they are not already at temp
    
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    BED_MESH_CALIBRATE ADAPTIVE=1                                                                                           ; Create a bed mesh that is whithin the bounds of the print

    STATUS_CLEANING
    CLEAN_NOZZLE
    SET_EXTRUDER_WAIT TEMP=150

    STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=1
    DETECT_OFFSET BED="{bed_type}" TEMP={hotendtemp} ; Calculate offset adjustments based on bed type, nozzle type, & extruder temp
    
    PARKPURGE                                                                                                               ; Park the extruder over the purge bucket until extruder temp is reached
    SET_EXTRUDER_WAIT TEMP={hotendtemp}                                                                                     ; wait for hotend temp
    EXTRUDE A=15
    WAIT S=10  
    STATUS_CLEANING                                                                                                             ; Wait 10 seconds before cleaning
    CLEAN_NOZZLE
    
    SKEW_PROFILE LOAD=CaliFlower
    SFS_ENABLE                                                                                                              ; Enable the smart filament sensor after the purge line. NOTE: This is done to avoid false detects of filament runout
    STATUS_PRINTING
    LINE_PURGE                                                                                                              ; Run a purge line right before the print

[gcode_macro PRINT_END]
gcode:
    {action_respond_info("Running PRINT END...")}

    {% set filament = params.FILAMENT|string %}
    {% set z = params.Z|default(20)|int %}                                                                                 
    {% set x = params.X|default(20)|int %}
    {% set y = params.Y|default(20)|int %}

    M400                                                                                                                    ; wait for buffer to clear
    G91                                                                                                                     ; relative positioning
    {% if (printer.gcode_move.position.x + x) < printer.toolhead.axis_maximum.x and 
    (printer.gcode_move.position.y + y) < printer.toolhead.axis_maximum.y %}
        G0 Z1.00 X{x} Y{y} F20000                                                                                          ; move nozzle to remove stringing
        {% else %}
            { action_respond_info("PRINT_END: XY exceeds maximum XY distance.") }                                           ; if zxy max is exceeded, show message
        {% endif %}
                                                                                              
    TURN_OFF_HEATERS
    # UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=1
    M107                                                                                                                    ; turn off fan
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                          ; check that lift z doesn't exceed z max
            G1 Z{z} F3000                                                                                                   ; raise Z up by lift z amount
        {% else %}
            { action_respond_info("PRINT_END: Lift z exceeds maximum Z height.") }                                          ; if z max is exceeded, show message
        {% endif %}
    G90                                                                                                                     ; absolute positioning
    RETRACT A=-20                                                                                                           ; Retract an additional amount
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F3600                                    ; park nozzle at rear
    
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default
    SET_SKEW CLEAR=1

    SFS_DISABLE
    FILAMENT_DETECT FILAMENT={filament} EVENT=END
    STATUS_HOT
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                             ; set timeout back to configured value
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=300                                                                ; Start print cooldown loop
    # UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=3600                                                          ; Disable steppers after 1hr of print completion
    # UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=3600                                                               ; Set Idle lights after 1hr of print completion
    # RESET_SPEEDS_FEEDS                                                                                                      ; Reset all speeds and feeds because I forget

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    {action_respond_info("Running CANCEL PRINT...")}

    # LIGHTS PRESET=PRINT_CANCEL
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    G91                                                                                                                     ; relative positioning
    G1 Z40 F3000                                                                                                            ; move nozzle up 40mm
    G90                                                                                                                     ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F3600                                    ; park nozzle at rear
    RETRACT A=-20                                                                                                           ; Retract an additional amount
    
    M107                                                                                                                    ; turn off fan
    SFS_DISABLE
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default
    # SDCARD_RESET_FILE
    CANCEL_PRINT_BASE
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                             ; set timeout back to configured value
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=300                                                                ; Start print cooldown loop
    # UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=3600                                                          ; Disable steppers after 1hr of print completion
    # UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=3600                                                               ; Set Idle lights after 1hr of print completion
    # RESET_SPEEDS_FEEDS                                                                                                      ; Reset all speeds and feeds because I forget

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    {action_respond_info("Running PAUSE...")}

    # Parameters
    {% set z = params.Z|default(10)|int %}                                                                                  ; lift z amount
  
    {% if printer['pause_resume'].is_paused|int == 0 %}		
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                   ; set hotend temp variable for reference in resume macro
        SFS_DISABLE                                                                                                         ; disable filament sensor
        # LIGHTS PRESET=PAUSED                                                                                                ; set lights to a paused state
        SAVE_GCODE_STATE NAME=PAUSE                                                                                         ; save current print position for resume
        PAUSE_BASE                                                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                      ; check that zhop doesn't exceed z max
            G91                                                                                                             ; relative positioning
            G1 Z{z} F900                                                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("PAUSE: Pause zhop exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                                 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                      ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    {action_respond_info("Running RESUME...")}
    
    # Parameters
    {% set e = params.E|default(2)|int %}
  
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                                                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         ; set timeout back to configured value
        
        {% if etemp > 0 %}
            # LIGHTS PRESET=HEATING
            SET_EXTRUDER_WAIT TEMP={etemp|int}                                                                              ; wait for hotend to heat back up
        {% endif %}
        
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                                                            ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                                 ; relative positioning
        M83                                                                                                                 ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                       ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                            ; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        
        # LIGHTS PRESET=PRINTING
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                                                ; restore position
        # UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=3                                                               ; Resume heater fan monitoring
        RESUME_BASE                                                                                                         ; resume print
    {% endif %}

#####################################################################
#       Offset Detection
#####################################################################

[gcode_macro DETECT_OFFSET]
description: Determine additional offset based on bed, nozzle, and temp PERAMS: BED, NOZZLE, TEMP
gcode:
    {% set bed_type = params.BED|default("High Temp Plate")|string %}
    # {% set nozzle_type = params.NOZZLE|string %}
    {% set target_temp = params.TEMP|int %}

    # Need to test if nozzle type & bed type impacts results at different nozzle temps

    # Adjust based on nozzle temp
    {% if target_temp >=  260%}
        {action_respond_info("Adjusting Z offset 0.03 due to target temp (%s)" % (target_temp))}
        ADJUST_Z_OFFSET OS=0.03
    {% elif target_temp >=  200%}
        {action_respond_info("Adjusting Z offset 0.02 due to target temp (%s)" % (target_temp))}
        ADJUST_Z_OFFSET OS=0.02
    {% endif %}

    # Adjust based on bed type
    {% if bed_type == "Textured PEI Plate" %}
        {action_respond_info("DETECT_OFFSET: %s detected." % (bed_type))}

        # {action_respond_info("Adjusting Z offset by -0.06 due to bed type (%s)" % (bed_type))}
        # ADJUST_Z_OFFSET OS:-0.06

    {% elif bed_type == "High Temp Plate" %}  
        {action_respond_info("DETECT_OFFSET: %s detected." % (bed_type))}

        {action_respond_info("Adjusting Z offset by +0.03 due to bed type (%s)" % (bed_type))}
        ADJUST_Z_OFFSET OS=0.03
    {% else %}
        {action_respond_info("DETECT_OFFSET: Unknown bed type %s. No adjustemnts made." % (bed_type))}
    {% endif %}

#####################################################################
#       Filament
#####################################################################

[gcode_macro FILAMENT_DETECT]
description: Detect filament types handler PERAMS: FILAMENT
gcode:
    {% set filament = params.FILAMENT|default(ABS)|string %}
    {% set event = params.EVENT|default(START)|string %}
    
    {action_respond_info("FILAMENT_DETECT: %s detected. EVENT: %s" % (filament, event))}
    
    {% if 'START' in event %}
        {action_respond_info("FILAMENT_DETECT: Begin event %s " % (event))}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FAN S=30
            SET_PADVANCE V=0.028
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=1
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN S=0
            BED_FAN S=0
            SET_PADVANCE V=0.028
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
            VOC_FAN S=0
            BED_FAN S=0
        {% endif %}

    {% elif 'END' in event %}
        {action_respond_info("FILAMENT_DETECT: Begin event %s " % (event))}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FAN S=100
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN S=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
        {% endif %}
    {% endif %}

[gcode_macro SFS_DISABLE]
description: Disable smart filament sensor | Param: None
gcode:
    {action_respond_info("DISABLING the Smart Filament Sensor...")}
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=0

[gcode_macro SFS_ENABLE]
description: Enable smart filament sensor | Param: None
gcode:
    {action_respond_info("ENABLING the Smart Filament Sensor...")}
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1


[gcode_macro UNLOAD_FILAMENT]
gcode:
    {action_respond_info("Unloading filament...")}
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83
    G1 E10 F600
    G1 E-100 F900
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
description: Load filament PERAMS: DISTANCE
gcode:
    {% set DISTANCE = params.DISTANCE|default(120)|float %}

    {action_respond_info("Loading filament...")}
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83
    G1 E{DISTANCE} F450
    G1 E-.75
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro PURGE]
description: Purge filament PERAMS: None
gcode:
    M83      ; relative mode
    G1 E25 F200
    G1 E-3 F{100 * 5}
    WAIT S=5
    G92 E0   ; reset extruder

[gcode_macro M600]
description: Call for filament change. Perams: NONE
gcode:
    {action_respond_info("Filament change %(M600%) called.") }
    PAUSE

#####################################################################
#       Fan Control
#####################################################################

[gcode_macro BED_FAN]
description: Set Bed fans speed. Perams: S
gcode:
    {% set fanSpeed = params.S|default(100)|float / 100 %}
    
    {action_respond_info("BED fans speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=Bed_Fan SPEED={fanSpeed}

[gcode_macro VOC_FAN]
description: Set VOC fan speed. Perams: S
gcode:
    {% set fanSpeed = params.S|default(100)|float / 100 %}
    
    {action_respond_info("VOC fan speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=VOC_Fan SPEED={fanSpeed}

#####################################################################
#       Conditional Homing
#####################################################################

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before Perams: NONE
gcode:
    {action_respond_info("Conditional G28 has been called...")}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_respond_info("Doing a full G28 as the printer has not been homed before. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
        STATUS_HOMING
        G28
    {% else %}
        {action_respond_info("Printer already homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
    {% endif %}

#####################################################################
#       Parking
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
description: Park the extruder front and center. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the front...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
description: Park the extruder front and low to the bed. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the front low to the bed (Z20)...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
description: Park the extruder to the rear left. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the rear...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
description: Park the extruder in the center of the build volume. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the build volume...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 20mm above center of bed
[gcode_macro PARKBED]
description: Park the extruder in the center of the bed Z at 20mm. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the bed Z at 20mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90 
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

# Park 20mm above center of bed
[gcode_macro PARKPURGE]
description: Park the extruder over the purge bucket at 20mm. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER over the purge bucket Z at 20mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKPURGE
    G90 
    G0 X313 Y360 Z10 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKPURGE

[gcode_macro PARKBELTTENSION]
description: Park the extruder to measure belt tensions. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER for belt tension measurements...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKBELTTENSION
    G90 
    G0 X175 Y112 Z210 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBELTTENSION

#####################################################################
#   Nozzle Clean
#####################################################################

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 298   ; Set this X distance so that it's at the right edge of the scrubber.
variable_start_y: 357  ; Set this Y distance so that the nozzle is above the rear row of bristles.
variable_start_z: 1   ; Set this Z distance so that the nozzle tip is buried in the scrubber.
variable_wipe_dist: -35
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 10

gcode:
 CG28
 
 G90                                            ; absolute positioning
 
#  STATUS_CLEANING

 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} Y{start_y} F{wipe_spd * 60}
   G1 X{start_x} Y{start_y} F{wipe_spd * 60}
   G1 X{start_x + wipe_dist} Y{start_y - 5} F{wipe_spd * 60}
   G1 X{start_x} Y{start_y -5} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 X{start_x + 8} Z{raise_distance}

#  STATUS_IDLE

#####################################################################
#   PID Tuning
#####################################################################

[gcode_macro PID_Tune_EXTRUDER]
gcode:
    {% set temperature = params.TEMPERATURE|default(270) %}
    CG28
    M106 S255
    PID_CALIBRATE HEATER=extruder TARGET={temperature}
    SAVE_CONFIG

[gcode_macro PID_Tune_BED]
gcode:
    {% set temperature = params.TEMPERATURE|default(115) %}
    CG28
    M106 S255
    PID_CALIBRATE HEATER=heater_bed TARGET={temperature}
    SAVE_CONFIG

#####################################################################
#   Material Preheat
#####################################################################

[gcode_macro PREHEAT_ABS_PC]
description: Preheat ABS/PC
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: ABS/PC...")}
        SET_EXTRUDER_CONT TEMP=60
        M140 S115
        VOC_FAN S=100
        BED_FAN S=30
        CG28
        STATUS_HEATING
        PARKBED
        # UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=5
        STOP_DELAYED_GCODE
        UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=5
        _CHAMBER_BED_CHECK
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                       ; set timeout to 3 hours
    {% endif %}

[gcode_macro PREHEAT_PLA]
description: Preheat PLA
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: PLA...")}
        SET_EXTRUDER_CONT TEMP=60
        M140 S60
        VOC_FAN S=0
        BED_FAN S=0
        CG28
        STATUS_HEATING
        PARKBED
        # UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=5
        STOP_DELAYED_GCODE
        UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=5
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                      ; set timeout to 3 hours
    {% endif %}

# [gcode_macro PREHEAT_PETG]
# description: Preheat PETG
# gcode:
#     {% if printer['print_stats'].state == 'printing' %}
#         {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
#     {% else %}
#         {action_respond_info("PREHEAT: PETG...")}
#         SET_EXTRUDER_CONT TEMP=60
#         M140 S80
#         VOC_FAN S=0
#         BED_FAN S=0
#         CG28
#         STATUS_HEATING
#         PARKBED
#         # UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=5
#         STOP_DELAYED_GCODE
#         UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=5
#         SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                       ; set timeout to 3 hours
#     {% endif %}

#####################################################################
#       SET TEMPERATURES
#####################################################################

[gcode_macro M109]
rename_existing: M99109
description: Update "Wait for Hotend Temperature" to include acceptable buffer | Params: S
gcode:
    #Params
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-4} MAXIMUM={s+10}
    {% endif %}

[gcode_macro SET_BED_CONT]
description: Set bed temperature and continue PERAMS: TEMP
gcode:
    {% set bedtemp = params.TEMP|int %}
    
    {action_respond_info("Setting BED temp to %.0f C and CONTINUING..." % (bedtemp)) }
    M140 S{bedtemp} 

[gcode_macro SET_BED_WAIT]
description: Set bed temperature and wait till its reached. PERAMS: TEMP, TIME
gcode:
    {% set bedtemp = params.TEMP|int %}
    {% set TIME = params.SOAKTIME|default(2)|int %}
    {% set heater_bed = printer["heater_bed"] %}

    {% if heater_bed.temperature|int >= (bedtemp - 1) %}
        {action_respond_info("Headed bed already at set temp. Continuing...") }
    {% else %}
        {action_respond_info("Setting BED temp to %.0f C and WAITING..." % (bedtemp))}
        PARKBED
        # SET_EXTRUDER_CONT TEMP=100
        STATUS_HEATING
        M190 S{bedtemp}
        WAIT S={TIME * 60}
    {% endif %}

[gcode_macro SET_CHAMBER_MINIMUM]
description: Wait till the chamber temp reaches minimum. PERAMS: TEMP
gcode:
    {% set chambertemp = params.TEMP|int %}
    {% set chamber = printer["temperature_sensor Chamber_Mean"] %}
    
    {% if chamber.temperature|int >= (chambertemp - 1) %}
        {action_respond_info("Chamber already at min temp. Continuing...") }
    {% else %}
        {action_respond_info("Waiting for CHAMBER temp to reach %.0f C..." % (chambertemp))}
        # PARKBED
        # SET_EXTRUDER_CONT TEMP=100
        STATUS_HEATING
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Mean" MINIMUM={chambertemp}
    {% endif %}

[gcode_macro SET_EXTRUDER_WAIT]
description: Set extruder temperature and wait till its reached. PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and WAITING..." % (hotendtemp))}
    STATUS_HEATING
    M109 S{hotendtemp}

[gcode_macro SET_EXTRUDER_CONT]
description: Set extruder temperature and continue PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and CONTINUING..." % (hotendtemp))}
    M104 S{hotendtemp}

# [gcode_macro SET_BEACON_MINIMUM]
# description: Wait for the Beacon to be a minimum desired temperature | Params: TEMP
# gcode:
#     #Params
#     {% set desired_temp = params.TEMP|int %}
#     {% set current_temp = printer["temperature_sensor beacon_coil"].temperature %}

#     {% if current_temp < (desired_temp - 1) %}
#         {action_respond_info("WAITING for Beacon to reach %.0f C..." % (desired_temp))}
#         TEMPERATURE_WAIT SENSOR="temperature_sensor beacon_coil" MINIMUM={desired_temp}
#     {% else %}
#         {action_respond_info("Beacon already at desired temp, CONTINUING...")}
#     {% endif %}

#####################################################################
#   Miscellaneous
#####################################################################

[gcode_macro NOTIFY_READY]
gcode:
    {action_call_remote_method("notify",
                               name="pushover_notifier",
                               message="Printer at temperature")}

[gcode_macro WAIT]
description: Wait a specified number of seconds | Params: S
gcode:
    # Params
    {% set seconds = params.S|default(0)|int %}
    
    {% if seconds == 0 %}
        {action_respond_info("No amount of time was specifed! Not Waiting!") }
    {% else %}
        {action_respond_info("Waiting %.0f seconds..." % (seconds)) }

        G4 P{seconds * 1000}
    {% endif %}

[gcode_macro SET_PADVANCE]
description: Set presure advance to specified value PERAMS: V
gcode:
    {% set value = params.V|default(0)|float %}
    
    {% if value == 0 %}
        {% set value = printer.configfile.settings.extruder.pressure_advance %}
    {% endif %}
    {action_respond_info("Setting Presure Advance to %.6f..." % (value)) }
    SET_PRESSURE_ADVANCE ADVANCE={value}

[gcode_macro ADJUST_Z_OFFSET]
description: Adjust the Z offset. Typically used for different plates. PERAMS: OS
gcode:
    {% set offset = params.OS|default(0)|float %}

    {% if offset == 0 %}
        {action_respond_info("Offset is 0! Not making any adjustments!") }
    {% else %}
        {action_respond_info("Adjusting offset by %.3fmm..." % (offset)) }
        SET_GCODE_OFFSET Z_ADJUST={offset} MOVE=1
    {% endif %}

[gcode_macro RETRACT]
description: Retract a specific amount. PERAMS: A
gcode:
    {% set amount = params.A|default(0)|float %}

    SAVE_GCODE_STATE NAME=RETRACT
    {% if amount > 0 %}
        {action_respond_info("Retraction is greater than 0! Not retracting!") }
    {% else %}
        {action_respond_info("Retracting %.2fmm..." % (amount)) }
        G92 E0
        G1 E-3 F2100
        G1 E{amount} F600
        G92 E0
    {% endif %}
    RESTORE_GCODE_STATE NAME=RETRACT

[gcode_macro EXTRUDE]
description: Extrude a specific amount. PERAMS: A
gcode:
    {% set amount = params.A|default(0)|float %}

    SAVE_GCODE_STATE NAME=EXTRUDE
    {% if amount < 0 %}
        {action_respond_info("Extrusion is less than 0! Not extruding!") }
    {% else %}
        {action_respond_info("Extruding %.2fmm..." % (amount)) }
        G92 E0
        G1 E-3 F2100
        G1 E{amount} F600
        G92 E0
    {% endif %}
    RESTORE_GCODE_STATE NAME=EXTRUDE

[gcode_macro _CHAMBER_BED_CHECK]
description: Check to see if the chamber/bed loop needs to be called. PERAMS: NONE
gcode:
    {% set chamber = printer["temperature_sensor Chamber_Mean"] %}
    {% set heater_bed = printer["heater_bed"] %}
    
    {% if (chamber.temperature >= 60) and (heater_bed.temperature|int >= (heater_bed.target|int - 1)) %}
        {action_respond_info("Not running READY_TO_PRINT_LOOP as the printer is already at temp") }
        STATUS_READY
    {% else %}
        UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=5
    {% endif %}

[gcode_macro RESET_SPEEDS_FEEDS]
description: Reset printer speeds and feeds to what is defined in the config file PERAMS: NONE
gcode:
    {% set bypass = params.BYPASS|default(0)|int %}

    {% if bypass == 1 %}
        {action_respond_info("Not resetting speeds and feeds. BYPASS enabled!")}
    {% else %}
        {action_respond_info("WARNING: RESETTING ALL SPEEDS AND FEEDS TO DEFAULT!!! IF YOU ARE TUNING YOU WILL WANT TO SEND OVERRIDES AGAIN!!!")}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
        M221 S100                                                                                                               ; Reset flow rate to 100%
        M220 S100                                                                                                               ; reset speed multiplier
    {% endif %}

[gcode_macro STOP_DELAYED_GCODE]
description: Stop defined delayed gcode Perams: NONE
gcode:
    {action_respond_info("Stopping all DELAYED GCODE...")}
    # UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=0
    # UPDATE_DELAYED_GCODE ID=DELAYED_MCU_OFF DURATION=0
    # UPDATE_DELAYED_GCODE ID=DELAYED_LIGHTS_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=0
    # UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=0
    UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
    UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=0

[gcode_macro _TEST_BELTS]
description: Move the toolhead around the around to test BFI tension Perams: S (circles), F (rate)
gcode:
  {% if 'x' not in printer.toolhead.homed_axes %}
  {% if 'y' not in printer.toolhead.homed_axes %}
  G28 X Y 
  {% endif %}
  {% endif %}
 
  {% set circles = params.S|default(1)|int %}
  {% set rate = params.F|default(18000)|int %}
  {% for i in range(circles) %}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
      G1 X{printer.toolhead.axis_maximum.x - 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
      G1 X{printer.toolhead.axis_maximum.x - 15} Y{printer.toolhead.axis_maximum.y - 15} F{rate}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_maximum.y - 15}  F{rate}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
    {% endfor %}
    G1 X{ printer.toolhead.axis_maximum.x / 2  } Y{printer.toolhead.axis_maximum.y  /2}  F{rate}

[gcode_macro DUMP_PARAMETERS]
description: Dumps all Klipper parameters to the console. This helps to find Klipper system variables for use in macros | Params: None
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}